// This file is automatically generated, so please do not edit it.
// @generated by `flutter_rust_bridge`@ 2.11.1.

// ignore_for_file: invalid_use_of_internal_member, unused_import, unnecessary_import

import '../frb_generated.dart';
import '../logic/board.dart';
import '../logic/creature.dart';
import '../logic/solver.dart';
import '../logic/tile_map.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';
import 'package:freezed_annotation/freezed_annotation.dart' hide protected;
part 'main.freezed.dart';

// These functions are ignored because they are not marked as `pub`: `genetic_search_thread`, `rotate_left`, `start_search`, `vector`
// These function are ignored because they are on traits that is not defined in current crate (put an empty `#[frb]` on it to unignore): `add_assign`, `add`, `assert_receiver_is_total_eq`, `clone`, `clone`, `clone`, `div`, `eq`, `eq`, `eq`, `fmt`, `fmt`, `hash`, `mul`, `sub_assign`

Room searchBoard() => RustLib.instance.api.crateApiMainSearchBoard();

enum Direction {
  north,
  south,
  east,
  west;

  Float32List dartVector() =>
      RustLib.instance.api.crateApiMainDirectionDartVector(that: this);

  Direction left() =>
      RustLib.instance.api.crateApiMainDirectionLeft(that: this);

  Direction reverse() =>
      RustLib.instance.api.crateApiMainDirectionReverse(that: this);

  Direction right() =>
      RustLib.instance.api.crateApiMainDirectionRight(that: this);
}

class Pos {
  final PlatformInt64 x;
  final PlatformInt64 y;

  const Pos.raw({required this.x, required this.y});

  Float32List dartVector() =>
      RustLib.instance.api.crateApiMainPosDartVector(that: this);

  factory Pos({required PlatformInt64 x, required PlatformInt64 y}) =>
      RustLib.instance.api.crateApiMainPosNew(x: x, y: y);

  @override
  int get hashCode => x.hashCode ^ y.hashCode;

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is Pos &&
          runtimeType == other.runtimeType &&
          x == other.x &&
          y == other.y;
}

@freezed
sealed class Room with _$Room {
  const Room._();

  const factory Room.lobby(Board field0) = Room_Lobby;
  const factory Room.trial(Creature field0) = Room_Trial;

  Board getBoard() => RustLib.instance.api.crateApiMainRoomGetBoard(that: this);

  PlatformInt64 getHeight() =>
      RustLib.instance.api.crateApiMainRoomGetHeight(that: this);

  TileMap getMap() => RustLib.instance.api.crateApiMainRoomGetMap(that: this);

  PlatformInt64? getMaxMovementCount() =>
      RustLib.instance.api.crateApiMainRoomGetMaxMovementCount(that: this);

  Pos getReset() => RustLib.instance.api.crateApiMainRoomGetReset(that: this);

  Pos getStart() => RustLib.instance.api.crateApiMainRoomGetStart(that: this);

  Direction getStartDirection() =>
      RustLib.instance.api.crateApiMainRoomGetStartDirection(that: this);

  PlatformInt64 getWidth() =>
      RustLib.instance.api.crateApiMainRoomGetWidth(that: this);

  Room rotateLeft() =>
      RustLib.instance.api.crateApiMainRoomRotateLeft(that: this);
}

@freezed
sealed class Tile with _$Tile {
  const Tile._();

  const factory Tile.entrance() = Tile_Entrance;
  const factory Tile.gate() = Tile_Gate;
  const factory Tile.wall() = Tile_Wall;
  const factory Tile.ice() = Tile_Ice;
  const factory Tile.thinIce(int field0) = Tile_ThinIce;
  const factory Tile.weakBox(int field0) = Tile_WeakBox;
  const factory Tile.outside() = Tile_Outside;

  bool isSolid() => RustLib.instance.api.crateApiMainTileIsSolid(that: this);

  void simbol() => RustLib.instance.api.crateApiMainTileSimbol(that: this);
}
