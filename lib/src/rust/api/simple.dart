// This file is automatically generated, so please do not edit it.
// @generated by `flutter_rust_bridge`@ 2.11.1.

// ignore_for_file: invalid_use_of_internal_member, unused_import, unnecessary_import

import '../frb_generated.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';

// These functions are ignored because they are not marked as `pub`: `board_cleanup`, `fitness`, `get_random_board`, `mutate`, `mutate`, `new`, `presentation_cleanup`, `simbol`, `solve`, `step`
// These types are ignored because they are neither used by any `pub` functions nor (for structs and enums) marked `#[frb(unignore)]`: `Analysis`, `Creature`, `SearchState`
// These function are ignored because they are on traits that is not defined in current crate (put an empty `#[frb]` on it to unignore): `clone`, `clone`, `clone`, `clone`, `clone`, `eq`, `eq`, `eq`, `fmt`, `fmt`, `fmt`, `partial_cmp`

Board searchBoard() => RustLib.instance.api.crateApiSimpleSearchBoard();

class Board {
  final List<List<Tile>> map;
  final (PlatformInt64, PlatformInt64) start;
  final (PlatformInt64, PlatformInt64) end;
  final Direction startDirection;
  final Direction endDirection;
  final PlatformInt64 area;

  const Board({
    required this.map,
    required this.start,
    required this.end,
    required this.startDirection,
    required this.endDirection,
    required this.area,
  });

  @override
  int get hashCode =>
      map.hashCode ^
      start.hashCode ^
      end.hashCode ^
      startDirection.hashCode ^
      endDirection.hashCode ^
      area.hashCode;

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is Board &&
          runtimeType == other.runtimeType &&
          map == other.map &&
          start == other.start &&
          end == other.end &&
          startDirection == other.startDirection &&
          endDirection == other.endDirection &&
          area == other.area;
}

enum Direction {
  north,
  south,
  east,
  west;

  Future<Direction> reverse() =>
      RustLib.instance.api.crateApiSimpleDirectionReverse(that: this);

  (PlatformInt64, PlatformInt64) vector() =>
      RustLib.instance.api.crateApiSimpleDirectionVector(that: this);
}

enum Tile { entrance, gate, wall, ice, ground, outside }
