// This file is automatically generated, so please do not edit it.
// @generated by `flutter_rust_bridge`@ 2.11.1.

// ignore_for_file: unused_import, unused_element, unnecessary_import, duplicate_ignore, invalid_use_of_internal_member, annotate_overrides, non_constant_identifier_names, curly_braces_in_flow_control_structures, prefer_const_literals_to_create_immutables, unused_field

import 'api/simple.dart';
import 'dart:async';
import 'dart:convert';
import 'dart:ffi' as ffi;
import 'frb_generated.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated_io.dart';

abstract class RustLibApiImplPlatform extends BaseApiImpl<RustLibWire> {
  RustLibApiImplPlatform({
    required super.handler,
    required super.wire,
    required super.generalizedFrbRustBinding,
    required super.portManager,
  });

  @protected
  Board dco_decode_board(dynamic raw);

  @protected
  Direction dco_decode_direction(dynamic raw);

  @protected
  int dco_decode_i_32(dynamic raw);

  @protected
  PlatformInt64 dco_decode_isize(dynamic raw);

  @protected
  List<List<Tile>> dco_decode_list_list_tile(dynamic raw);

  @protected
  List<Tile> dco_decode_list_tile(dynamic raw);

  @protected
  (PlatformInt64, PlatformInt64) dco_decode_record_isize_isize(dynamic raw);

  @protected
  Tile dco_decode_tile(dynamic raw);

  @protected
  void dco_decode_unit(dynamic raw);

  @protected
  Board sse_decode_board(SseDeserializer deserializer);

  @protected
  Direction sse_decode_direction(SseDeserializer deserializer);

  @protected
  int sse_decode_i_32(SseDeserializer deserializer);

  @protected
  PlatformInt64 sse_decode_isize(SseDeserializer deserializer);

  @protected
  List<List<Tile>> sse_decode_list_list_tile(SseDeserializer deserializer);

  @protected
  List<Tile> sse_decode_list_tile(SseDeserializer deserializer);

  @protected
  (PlatformInt64, PlatformInt64) sse_decode_record_isize_isize(
    SseDeserializer deserializer,
  );

  @protected
  Tile sse_decode_tile(SseDeserializer deserializer);

  @protected
  void sse_decode_unit(SseDeserializer deserializer);

  @protected
  bool sse_decode_bool(SseDeserializer deserializer);

  @protected
  void sse_encode_board(Board self, SseSerializer serializer);

  @protected
  void sse_encode_direction(Direction self, SseSerializer serializer);

  @protected
  void sse_encode_i_32(int self, SseSerializer serializer);

  @protected
  void sse_encode_isize(PlatformInt64 self, SseSerializer serializer);

  @protected
  void sse_encode_list_list_tile(
    List<List<Tile>> self,
    SseSerializer serializer,
  );

  @protected
  void sse_encode_list_tile(List<Tile> self, SseSerializer serializer);

  @protected
  void sse_encode_record_isize_isize(
    (PlatformInt64, PlatformInt64) self,
    SseSerializer serializer,
  );

  @protected
  void sse_encode_tile(Tile self, SseSerializer serializer);

  @protected
  void sse_encode_unit(void self, SseSerializer serializer);

  @protected
  void sse_encode_bool(bool self, SseSerializer serializer);
}

// Section: wire_class

class RustLibWire implements BaseWire {
  factory RustLibWire.fromExternalLibrary(ExternalLibrary lib) =>
      RustLibWire(lib.ffiDynamicLibrary);

  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
  _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  RustLibWire(ffi.DynamicLibrary dynamicLibrary)
    : _lookup = dynamicLibrary.lookup;
}
