// This file is automatically generated, so please do not edit it.
// @generated by `flutter_rust_bridge`@ 2.11.1.

// ignore_for_file: unused_import, unused_element, unnecessary_import, duplicate_ignore, invalid_use_of_internal_member, annotate_overrides, non_constant_identifier_names, curly_braces_in_flow_control_structures, prefer_const_literals_to_create_immutables, unused_field

import 'api/main.dart';
import 'dart:async';
import 'dart:convert';
import 'frb_generated.dart';
import 'frb_generated.io.dart'
    if (dart.library.js_interop) 'frb_generated.web.dart';
import 'logic/board.dart';
import 'logic/creature.dart';
import 'logic/solver.dart';
import 'logic/tile_map.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';

/// Main entrypoint of the Rust API
class RustLib extends BaseEntrypoint<RustLibApi, RustLibApiImpl, RustLibWire> {
  @internal
  static final instance = RustLib._();

  RustLib._();

  /// Initialize flutter_rust_bridge
  static Future<void> init({
    RustLibApi? api,
    BaseHandler? handler,
    ExternalLibrary? externalLibrary,
    bool forceSameCodegenVersion = true,
  }) async {
    await instance.initImpl(
      api: api,
      handler: handler,
      externalLibrary: externalLibrary,
      forceSameCodegenVersion: forceSameCodegenVersion,
    );
  }

  /// Initialize flutter_rust_bridge in mock mode.
  /// No libraries for FFI are loaded.
  static void initMock({required RustLibApi api}) {
    instance.initMockImpl(api: api);
  }

  /// Dispose flutter_rust_bridge
  ///
  /// The call to this function is optional, since flutter_rust_bridge (and everything else)
  /// is automatically disposed when the app stops.
  static void dispose() => instance.disposeImpl();

  @override
  ApiImplConstructor<RustLibApiImpl, RustLibWire> get apiImplConstructor =>
      RustLibApiImpl.new;

  @override
  WireConstructor<RustLibWire> get wireConstructor =>
      RustLibWire.fromExternalLibrary;

  @override
  Future<void> executeRustInitializers() async {
    api.crateApiMainInitApp();
  }

  @override
  ExternalLibraryLoaderConfig get defaultExternalLibraryLoaderConfig =>
      kDefaultExternalLibraryLoaderConfig;

  @override
  String get codegenVersion => '2.11.1';

  @override
  int get rustContentHash => -1869504567;

  static const kDefaultExternalLibraryLoaderConfig =
      ExternalLibraryLoaderConfig(
        stem: 'rust_lib_icedash',
        ioDirectory: 'rust/target/release/',
        webPrefix: 'pkg/',
      );
}

abstract class RustLibApi extends BaseApi {
  Room crateApiMainDartGetNewBoard();

  void crateApiMainDartWorkerHalt({required BigInt millis});

  Float32List crateApiMainDirectionDartVector({required Direction that});

  Direction crateApiMainDirectionLeft({required Direction that});

  Direction crateApiMainDirectionReverse({required Direction that});

  Direction crateApiMainDirectionRight({required Direction that});

  void crateApiMainInitApp();

  Float32List crateApiMainPosDartVector({required Pos that});

  Pos crateApiMainPosNew({required PlatformInt64 x, required PlatformInt64 y});

  Board crateApiMainRoomGetBoard({required Room that});

  Pos crateApiMainRoomGetEnd({required Room that});

  PlatformInt64 crateApiMainRoomGetHeight({required Room that});

  TileMap crateApiMainRoomGetMap({required Room that});

  PlatformInt64? crateApiMainRoomGetMaxMovementCount({required Room that});

  Pos crateApiMainRoomGetReset({required Room that});

  Pos crateApiMainRoomGetStart({required Room that});

  Direction crateApiMainRoomGetStartDirection({required Room that});

  PlatformInt64 crateApiMainRoomGetWidth({required Room that});

  Room crateApiMainRoomRotateLeft({required Room that});

  bool crateApiMainTileIsSolid({required Tile that});

  void crateApiMainTileSimbol({required Tile that});
}

class RustLibApiImpl extends RustLibApiImplPlatform implements RustLibApi {
  RustLibApiImpl({
    required super.handler,
    required super.wire,
    required super.generalizedFrbRustBinding,
    required super.portManager,
  });

  @override
  Room crateApiMainDartGetNewBoard() {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 1)!;
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_room,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiMainDartGetNewBoardConstMeta,
        argValues: [],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiMainDartGetNewBoardConstMeta =>
      const TaskConstMeta(debugName: "dart_get_new_board", argNames: []);

  @override
  void crateApiMainDartWorkerHalt({required BigInt millis}) {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_usize(millis, serializer);
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 2)!;
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_unit,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiMainDartWorkerHaltConstMeta,
        argValues: [millis],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiMainDartWorkerHaltConstMeta =>
      const TaskConstMeta(debugName: "dart_worker_halt", argNames: ["millis"]);

  @override
  Float32List crateApiMainDirectionDartVector({required Direction that}) {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_direction(that, serializer);
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 3)!;
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_list_prim_f_32_strict,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiMainDirectionDartVectorConstMeta,
        argValues: [that],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiMainDirectionDartVectorConstMeta =>
      const TaskConstMeta(
        debugName: "direction_dart_vector",
        argNames: ["that"],
      );

  @override
  Direction crateApiMainDirectionLeft({required Direction that}) {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_direction(that, serializer);
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 4)!;
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_direction,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiMainDirectionLeftConstMeta,
        argValues: [that],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiMainDirectionLeftConstMeta =>
      const TaskConstMeta(debugName: "direction_left", argNames: ["that"]);

  @override
  Direction crateApiMainDirectionReverse({required Direction that}) {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_direction(that, serializer);
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 5)!;
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_direction,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiMainDirectionReverseConstMeta,
        argValues: [that],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiMainDirectionReverseConstMeta =>
      const TaskConstMeta(debugName: "direction_reverse", argNames: ["that"]);

  @override
  Direction crateApiMainDirectionRight({required Direction that}) {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_direction(that, serializer);
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 6)!;
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_direction,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiMainDirectionRightConstMeta,
        argValues: [that],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiMainDirectionRightConstMeta =>
      const TaskConstMeta(debugName: "direction_right", argNames: ["that"]);

  @override
  void crateApiMainInitApp() {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 7)!;
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_unit,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiMainInitAppConstMeta,
        argValues: [],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiMainInitAppConstMeta =>
      const TaskConstMeta(debugName: "init_app", argNames: []);

  @override
  Float32List crateApiMainPosDartVector({required Pos that}) {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_box_autoadd_pos(that, serializer);
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 8)!;
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_list_prim_f_32_strict,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiMainPosDartVectorConstMeta,
        argValues: [that],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiMainPosDartVectorConstMeta =>
      const TaskConstMeta(debugName: "pos_dart_vector", argNames: ["that"]);

  @override
  Pos crateApiMainPosNew({required PlatformInt64 x, required PlatformInt64 y}) {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_isize(x, serializer);
          sse_encode_isize(y, serializer);
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 9)!;
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_pos,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiMainPosNewConstMeta,
        argValues: [x, y],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiMainPosNewConstMeta =>
      const TaskConstMeta(debugName: "pos_new", argNames: ["x", "y"]);

  @override
  Board crateApiMainRoomGetBoard({required Room that}) {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_box_autoadd_room(that, serializer);
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 10)!;
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_board,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiMainRoomGetBoardConstMeta,
        argValues: [that],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiMainRoomGetBoardConstMeta =>
      const TaskConstMeta(debugName: "room_get_board", argNames: ["that"]);

  @override
  Pos crateApiMainRoomGetEnd({required Room that}) {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_box_autoadd_room(that, serializer);
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 11)!;
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_pos,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiMainRoomGetEndConstMeta,
        argValues: [that],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiMainRoomGetEndConstMeta =>
      const TaskConstMeta(debugName: "room_get_end", argNames: ["that"]);

  @override
  PlatformInt64 crateApiMainRoomGetHeight({required Room that}) {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_box_autoadd_room(that, serializer);
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 12)!;
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_isize,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiMainRoomGetHeightConstMeta,
        argValues: [that],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiMainRoomGetHeightConstMeta =>
      const TaskConstMeta(debugName: "room_get_height", argNames: ["that"]);

  @override
  TileMap crateApiMainRoomGetMap({required Room that}) {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_box_autoadd_room(that, serializer);
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 13)!;
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_tile_map,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiMainRoomGetMapConstMeta,
        argValues: [that],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiMainRoomGetMapConstMeta =>
      const TaskConstMeta(debugName: "room_get_map", argNames: ["that"]);

  @override
  PlatformInt64? crateApiMainRoomGetMaxMovementCount({required Room that}) {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_box_autoadd_room(that, serializer);
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 14)!;
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_opt_box_autoadd_isize,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiMainRoomGetMaxMovementCountConstMeta,
        argValues: [that],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiMainRoomGetMaxMovementCountConstMeta =>
      const TaskConstMeta(
        debugName: "room_get_max_movement_count",
        argNames: ["that"],
      );

  @override
  Pos crateApiMainRoomGetReset({required Room that}) {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_box_autoadd_room(that, serializer);
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 15)!;
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_pos,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiMainRoomGetResetConstMeta,
        argValues: [that],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiMainRoomGetResetConstMeta =>
      const TaskConstMeta(debugName: "room_get_reset", argNames: ["that"]);

  @override
  Pos crateApiMainRoomGetStart({required Room that}) {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_box_autoadd_room(that, serializer);
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 16)!;
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_pos,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiMainRoomGetStartConstMeta,
        argValues: [that],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiMainRoomGetStartConstMeta =>
      const TaskConstMeta(debugName: "room_get_start", argNames: ["that"]);

  @override
  Direction crateApiMainRoomGetStartDirection({required Room that}) {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_box_autoadd_room(that, serializer);
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 17)!;
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_direction,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiMainRoomGetStartDirectionConstMeta,
        argValues: [that],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiMainRoomGetStartDirectionConstMeta =>
      const TaskConstMeta(
        debugName: "room_get_start_direction",
        argNames: ["that"],
      );

  @override
  PlatformInt64 crateApiMainRoomGetWidth({required Room that}) {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_box_autoadd_room(that, serializer);
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 18)!;
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_isize,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiMainRoomGetWidthConstMeta,
        argValues: [that],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiMainRoomGetWidthConstMeta =>
      const TaskConstMeta(debugName: "room_get_width", argNames: ["that"]);

  @override
  Room crateApiMainRoomRotateLeft({required Room that}) {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_box_autoadd_room(that, serializer);
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 19)!;
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_room,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiMainRoomRotateLeftConstMeta,
        argValues: [that],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiMainRoomRotateLeftConstMeta =>
      const TaskConstMeta(debugName: "room_rotate_left", argNames: ["that"]);

  @override
  bool crateApiMainTileIsSolid({required Tile that}) {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_box_autoadd_tile(that, serializer);
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 20)!;
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_bool,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiMainTileIsSolidConstMeta,
        argValues: [that],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiMainTileIsSolidConstMeta =>
      const TaskConstMeta(debugName: "tile_is_solid", argNames: ["that"]);

  @override
  void crateApiMainTileSimbol({required Tile that}) {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_box_autoadd_tile(that, serializer);
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 21)!;
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_unit,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiMainTileSimbolConstMeta,
        argValues: [that],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiMainTileSimbolConstMeta =>
      const TaskConstMeta(debugName: "tile_simbol", argNames: ["that"]);

  @protected
  Analysis dco_decode_analysis(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 3)
      throw Exception('unexpected arr length: expect 3 but see ${arr.length}');
    return Analysis(
      optimalMovementCount: dco_decode_usize(arr[0]),
      optimalRoutes: dco_decode_list_route(arr[1]),
      suboptimalRoutes: dco_decode_list_route(arr[2]),
    );
  }

  @protected
  Board dco_decode_board(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 6)
      throw Exception('unexpected arr length: expect 6 but see ${arr.length}');
    return Board(
      map: dco_decode_tile_map(arr[0]),
      start: dco_decode_pos(arr[1]),
      end: dco_decode_pos(arr[2]),
      resetPos: dco_decode_pos(arr[3]),
      startDirection: dco_decode_direction(arr[4]),
      endDirection: dco_decode_direction(arr[5]),
    );
  }

  @protected
  bool dco_decode_bool(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as bool;
  }

  @protected
  Board dco_decode_box_autoadd_board(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_board(raw);
  }

  @protected
  Creature dco_decode_box_autoadd_creature(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_creature(raw);
  }

  @protected
  PlatformInt64 dco_decode_box_autoadd_isize(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_isize(raw);
  }

  @protected
  Pos dco_decode_box_autoadd_pos(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_pos(raw);
  }

  @protected
  Room dco_decode_box_autoadd_room(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_room(raw);
  }

  @protected
  Tile dco_decode_box_autoadd_tile(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_tile(raw);
  }

  @protected
  Creature dco_decode_creature(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 4)
      throw Exception('unexpected arr length: expect 4 but see ${arr.length}');
    return Creature(
      board: dco_decode_board(arr[0]),
      fitness: dco_decode_f_32(arr[1]),
      analysis: dco_decode_analysis(arr[2]),
      mutationCount: dco_decode_usize(arr[3]),
    );
  }

  @protected
  Direction dco_decode_direction(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return Direction.values[raw as int];
  }

  @protected
  double dco_decode_f_32(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as double;
  }

  @protected
  int dco_decode_i_32(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as int;
  }

  @protected
  PlatformInt64 dco_decode_isize(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dcoDecodeI64(raw);
  }

  @protected
  List<List<Tile>> dco_decode_list_list_tile(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_list_tile).toList();
  }

  @protected
  List<Pos> dco_decode_list_pos(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_pos).toList();
  }

  @protected
  Float32List dco_decode_list_prim_f_32_strict(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as Float32List;
  }

  @protected
  Int64List dco_decode_list_prim_isize_strict(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as Int64List;
  }

  @protected
  List<(Direction, Pos)> dco_decode_list_record_direction_pos(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_record_direction_pos).toList();
  }

  @protected
  List<Route> dco_decode_list_route(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_route).toList();
  }

  @protected
  List<Tile> dco_decode_list_tile(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_tile).toList();
  }

  @protected
  PlatformInt64? dco_decode_opt_box_autoadd_isize(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_box_autoadd_isize(raw);
  }

  @protected
  Pos dco_decode_pos(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return Pos.raw(x: dco_decode_isize(arr[0]), y: dco_decode_isize(arr[1]));
  }

  @protected
  (Direction, Pos) dco_decode_record_direction_pos(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2) {
      throw Exception('Expected 2 elements, got ${arr.length}');
    }
    return (dco_decode_direction(arr[0]), dco_decode_pos(arr[1]));
  }

  @protected
  Room dco_decode_room(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    switch (raw[0]) {
      case 0:
        return Room_Lobby(dco_decode_box_autoadd_board(raw[1]));
      case 1:
        return Room_Trial(dco_decode_box_autoadd_creature(raw[1]));
      default:
        throw Exception("unreachable");
    }
  }

  @protected
  Route dco_decode_route(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 3)
      throw Exception('unexpected arr length: expect 3 but see ${arr.length}');
    return Route(
      solution: dco_decode_list_record_direction_pos(arr[0]),
      decisionPositions: dco_decode_list_pos(arr[1]),
      moveSizes: dco_decode_list_prim_isize_strict(arr[2]),
    );
  }

  @protected
  Tile dco_decode_tile(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    switch (raw[0]) {
      case 0:
        return Tile_Entrance();
      case 1:
        return Tile_Gate();
      case 2:
        return Tile_Wall();
      case 3:
        return Tile_Ice();
      case 4:
        return Tile_ThinIce(dco_decode_u_8(raw[1]));
      case 5:
        return Tile_WeakBox(dco_decode_u_8(raw[1]));
      case 6:
        return Tile_Outside();
      default:
        throw Exception("unreachable");
    }
  }

  @protected
  TileMap dco_decode_tile_map(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return TileMap(field0: dco_decode_list_list_tile(arr[0]));
  }

  @protected
  int dco_decode_u_8(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as int;
  }

  @protected
  void dco_decode_unit(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return;
  }

  @protected
  BigInt dco_decode_usize(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dcoDecodeU64(raw);
  }

  @protected
  Analysis sse_decode_analysis(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_optimalMovementCount = sse_decode_usize(deserializer);
    var var_optimalRoutes = sse_decode_list_route(deserializer);
    var var_suboptimalRoutes = sse_decode_list_route(deserializer);
    return Analysis(
      optimalMovementCount: var_optimalMovementCount,
      optimalRoutes: var_optimalRoutes,
      suboptimalRoutes: var_suboptimalRoutes,
    );
  }

  @protected
  Board sse_decode_board(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_map = sse_decode_tile_map(deserializer);
    var var_start = sse_decode_pos(deserializer);
    var var_end = sse_decode_pos(deserializer);
    var var_resetPos = sse_decode_pos(deserializer);
    var var_startDirection = sse_decode_direction(deserializer);
    var var_endDirection = sse_decode_direction(deserializer);
    return Board(
      map: var_map,
      start: var_start,
      end: var_end,
      resetPos: var_resetPos,
      startDirection: var_startDirection,
      endDirection: var_endDirection,
    );
  }

  @protected
  bool sse_decode_bool(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getUint8() != 0;
  }

  @protected
  Board sse_decode_box_autoadd_board(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_board(deserializer));
  }

  @protected
  Creature sse_decode_box_autoadd_creature(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_creature(deserializer));
  }

  @protected
  PlatformInt64 sse_decode_box_autoadd_isize(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_isize(deserializer));
  }

  @protected
  Pos sse_decode_box_autoadd_pos(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_pos(deserializer));
  }

  @protected
  Room sse_decode_box_autoadd_room(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_room(deserializer));
  }

  @protected
  Tile sse_decode_box_autoadd_tile(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_tile(deserializer));
  }

  @protected
  Creature sse_decode_creature(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_board = sse_decode_board(deserializer);
    var var_fitness = sse_decode_f_32(deserializer);
    var var_analysis = sse_decode_analysis(deserializer);
    var var_mutationCount = sse_decode_usize(deserializer);
    return Creature(
      board: var_board,
      fitness: var_fitness,
      analysis: var_analysis,
      mutationCount: var_mutationCount,
    );
  }

  @protected
  Direction sse_decode_direction(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_i_32(deserializer);
    return Direction.values[inner];
  }

  @protected
  double sse_decode_f_32(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getFloat32();
  }

  @protected
  int sse_decode_i_32(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getInt32();
  }

  @protected
  PlatformInt64 sse_decode_isize(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getPlatformInt64();
  }

  @protected
  List<List<Tile>> sse_decode_list_list_tile(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <List<Tile>>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_list_tile(deserializer));
    }
    return ans_;
  }

  @protected
  List<Pos> sse_decode_list_pos(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <Pos>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_pos(deserializer));
    }
    return ans_;
  }

  @protected
  Float32List sse_decode_list_prim_f_32_strict(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var len_ = sse_decode_i_32(deserializer);
    return deserializer.buffer.getFloat32List(len_);
  }

  @protected
  Int64List sse_decode_list_prim_isize_strict(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var len_ = sse_decode_i_32(deserializer);
    return deserializer.buffer.getInt64List(len_);
  }

  @protected
  List<(Direction, Pos)> sse_decode_list_record_direction_pos(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <(Direction, Pos)>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_record_direction_pos(deserializer));
    }
    return ans_;
  }

  @protected
  List<Route> sse_decode_list_route(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <Route>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_route(deserializer));
    }
    return ans_;
  }

  @protected
  List<Tile> sse_decode_list_tile(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <Tile>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_tile(deserializer));
    }
    return ans_;
  }

  @protected
  PlatformInt64? sse_decode_opt_box_autoadd_isize(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_isize(deserializer));
    } else {
      return null;
    }
  }

  @protected
  Pos sse_decode_pos(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_x = sse_decode_isize(deserializer);
    var var_y = sse_decode_isize(deserializer);
    return Pos.raw(x: var_x, y: var_y);
  }

  @protected
  (Direction, Pos) sse_decode_record_direction_pos(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_field0 = sse_decode_direction(deserializer);
    var var_field1 = sse_decode_pos(deserializer);
    return (var_field0, var_field1);
  }

  @protected
  Room sse_decode_room(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var tag_ = sse_decode_i_32(deserializer);
    switch (tag_) {
      case 0:
        var var_field0 = sse_decode_box_autoadd_board(deserializer);
        return Room_Lobby(var_field0);
      case 1:
        var var_field0 = sse_decode_box_autoadd_creature(deserializer);
        return Room_Trial(var_field0);
      default:
        throw UnimplementedError('');
    }
  }

  @protected
  Route sse_decode_route(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_solution = sse_decode_list_record_direction_pos(deserializer);
    var var_decisionPositions = sse_decode_list_pos(deserializer);
    var var_moveSizes = sse_decode_list_prim_isize_strict(deserializer);
    return Route(
      solution: var_solution,
      decisionPositions: var_decisionPositions,
      moveSizes: var_moveSizes,
    );
  }

  @protected
  Tile sse_decode_tile(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var tag_ = sse_decode_i_32(deserializer);
    switch (tag_) {
      case 0:
        return Tile_Entrance();
      case 1:
        return Tile_Gate();
      case 2:
        return Tile_Wall();
      case 3:
        return Tile_Ice();
      case 4:
        var var_field0 = sse_decode_u_8(deserializer);
        return Tile_ThinIce(var_field0);
      case 5:
        var var_field0 = sse_decode_u_8(deserializer);
        return Tile_WeakBox(var_field0);
      case 6:
        return Tile_Outside();
      default:
        throw UnimplementedError('');
    }
  }

  @protected
  TileMap sse_decode_tile_map(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_field0 = sse_decode_list_list_tile(deserializer);
    return TileMap(field0: var_field0);
  }

  @protected
  int sse_decode_u_8(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getUint8();
  }

  @protected
  void sse_decode_unit(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
  }

  @protected
  BigInt sse_decode_usize(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getBigUint64();
  }

  @protected
  void sse_encode_analysis(Analysis self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(self.optimalMovementCount, serializer);
    sse_encode_list_route(self.optimalRoutes, serializer);
    sse_encode_list_route(self.suboptimalRoutes, serializer);
  }

  @protected
  void sse_encode_board(Board self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_tile_map(self.map, serializer);
    sse_encode_pos(self.start, serializer);
    sse_encode_pos(self.end, serializer);
    sse_encode_pos(self.resetPos, serializer);
    sse_encode_direction(self.startDirection, serializer);
    sse_encode_direction(self.endDirection, serializer);
  }

  @protected
  void sse_encode_bool(bool self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putUint8(self ? 1 : 0);
  }

  @protected
  void sse_encode_box_autoadd_board(Board self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_board(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_creature(
    Creature self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_creature(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_isize(
    PlatformInt64 self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_isize(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_pos(Pos self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_pos(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_room(Room self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_room(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_tile(Tile self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_tile(self, serializer);
  }

  @protected
  void sse_encode_creature(Creature self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_board(self.board, serializer);
    sse_encode_f_32(self.fitness, serializer);
    sse_encode_analysis(self.analysis, serializer);
    sse_encode_usize(self.mutationCount, serializer);
  }

  @protected
  void sse_encode_direction(Direction self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.index, serializer);
  }

  @protected
  void sse_encode_f_32(double self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putFloat32(self);
  }

  @protected
  void sse_encode_i_32(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putInt32(self);
  }

  @protected
  void sse_encode_isize(PlatformInt64 self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putPlatformInt64(self);
  }

  @protected
  void sse_encode_list_list_tile(
    List<List<Tile>> self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_list_tile(item, serializer);
    }
  }

  @protected
  void sse_encode_list_pos(List<Pos> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_pos(item, serializer);
    }
  }

  @protected
  void sse_encode_list_prim_f_32_strict(
    Float32List self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    serializer.buffer.putFloat32List(self);
  }

  @protected
  void sse_encode_list_prim_isize_strict(
    Int64List self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    serializer.buffer.putInt64List(self);
  }

  @protected
  void sse_encode_list_record_direction_pos(
    List<(Direction, Pos)> self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_record_direction_pos(item, serializer);
    }
  }

  @protected
  void sse_encode_list_route(List<Route> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_route(item, serializer);
    }
  }

  @protected
  void sse_encode_list_tile(List<Tile> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_tile(item, serializer);
    }
  }

  @protected
  void sse_encode_opt_box_autoadd_isize(
    PlatformInt64? self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_isize(self, serializer);
    }
  }

  @protected
  void sse_encode_pos(Pos self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_isize(self.x, serializer);
    sse_encode_isize(self.y, serializer);
  }

  @protected
  void sse_encode_record_direction_pos(
    (Direction, Pos) self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_direction(self.$1, serializer);
    sse_encode_pos(self.$2, serializer);
  }

  @protected
  void sse_encode_room(Room self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    switch (self) {
      case Room_Lobby(field0: final field0):
        sse_encode_i_32(0, serializer);
        sse_encode_box_autoadd_board(field0, serializer);
      case Room_Trial(field0: final field0):
        sse_encode_i_32(1, serializer);
        sse_encode_box_autoadd_creature(field0, serializer);
    }
  }

  @protected
  void sse_encode_route(Route self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_list_record_direction_pos(self.solution, serializer);
    sse_encode_list_pos(self.decisionPositions, serializer);
    sse_encode_list_prim_isize_strict(self.moveSizes, serializer);
  }

  @protected
  void sse_encode_tile(Tile self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    switch (self) {
      case Tile_Entrance():
        sse_encode_i_32(0, serializer);
      case Tile_Gate():
        sse_encode_i_32(1, serializer);
      case Tile_Wall():
        sse_encode_i_32(2, serializer);
      case Tile_Ice():
        sse_encode_i_32(3, serializer);
      case Tile_ThinIce(field0: final field0):
        sse_encode_i_32(4, serializer);
        sse_encode_u_8(field0, serializer);
      case Tile_WeakBox(field0: final field0):
        sse_encode_i_32(5, serializer);
        sse_encode_u_8(field0, serializer);
      case Tile_Outside():
        sse_encode_i_32(6, serializer);
    }
  }

  @protected
  void sse_encode_tile_map(TileMap self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_list_list_tile(self.field0, serializer);
  }

  @protected
  void sse_encode_u_8(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putUint8(self);
  }

  @protected
  void sse_encode_unit(void self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
  }

  @protected
  void sse_encode_usize(BigInt self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putBigUint64(self);
  }
}
